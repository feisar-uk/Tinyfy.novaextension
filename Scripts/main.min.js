const dependencies={npm:!1,terser:!1,lightningcss:!1};function formatBytes(e){if(0===e)return"0 Bytes";if(e<1024)return`${e} B`;return`${(e/1024).toFixed(1)} KB`}function checkCommand(e,n=[]){return new Promise(i=>{const t=new Process("/usr/bin/env",{args:[e,...n],stdio:"ignore"});t.onDidExit(e=>{i(0===e)}),t.start()})}function showDependencyError(e,n,i){const t=new NotificationRequest("dependency-error");t.title=e,t.body=n,i&&(t.actions=["Learn More"]),nova.notifications.add(t).then(e=>{0===e.actionIdx&&nova.openURL(i)})}function isRemoteFile(e){try{const n=nova.fs.stat(e);return null==n}catch(e){return!0}}function handleSave(e){try{const n=e.document.syntax,i=e.document.path;if(!i)return;if(isRemoteFile(i)){const e=new NotificationRequest("remote-file-unsupported");return e.title="Minification Skipped",e.body=`Cannot process remote file: ${nova.path.basename(i)}.\nOnly local files are supported.`,nova.notifications.add(e),void console.log(`Skipping minification for remote file: ${i}`)}if("javascript"===n){if(!(nova.config.get("terser.enabled","boolean")??!0))return void console.log("Terser is disabled in settings.");if(i.endsWith(".min.js"))return void console.log("Skipping already minified JS file.");minifyJS(i)}else if("css"===n||"scss"===n||"less"===n){if(!(nova.config.get("lightningcss.enabled","boolean")??!0))return void console.log("Lightning CSS is disabled in settings.");if(i.endsWith(".min.css"))return void console.log("Skipping already minified CSS file.");minifyCSS(i)}}catch(e){console.error("Error in handleSave:",e),showErrorNotification("Minification Error",`Unexpected error: ${e.message}`)}}async function minifyJS(e){if(!dependencies.terser)return void showToolNotInstalledError("Terser Not Installed","Cannot minify JavaScript. Please install Terser: npm install -g terser","https://www.npmjs.com/package/terser");const n=nova.config.get("terser.outputSuffix","string")||".min.js",i=e.replace(/\.js$/,n);if(e!==i)try{const n=nova.fs.open(e,"r"),t=n.read();if(n.close(),!t||0===t.length)throw new Error("Input file is empty");const o=t.length,s=Date.now(),r=await runMinifier(["npx","terser","--compress","--mangle"],t,"Terser"),a=nova.fs.open(i,"w");a.write(r),a.close();const c=Date.now()-s,l=o-r.length;showSuccessNotification("Terser: Minified Successfully",`${nova.path.basename(i)} processed in ${c}ms (saved ${formatBytes(l)})`)}catch(e){showErrorNotification("Terser: Minification Failed",e.message),console.error("JS Minification failed:",e)}else console.error("Input and output paths are the same. Aborting to prevent overwrite.")}async function minifyCSS(e){if(!dependencies.lightningcss)return void showToolNotInstalledError("Lightning CSS Not Installed","Cannot minify CSS. Please install Lightning CSS: npm install -g lightningcss-cli","https://www.npmjs.com/package/lightningcss-cli");const n=nova.config.get("lightningcss.outputSuffix","string")||".min.css",i=e.replace(/\.(css|scss|less)$/,n);if(e!==i)try{const n=nova.fs.stat(e).size,t=Date.now();await new Promise((n,t)=>{const o=new Process("/usr/bin/env",{args:["npx","lightningcss","--minify",e,"-o",i],stdio:"pipe",shell:!1});let s="";o.onStderr(e=>{s+=e}),o.onDidExit(e=>{if(0===e)n();else{const n=s.trim()||`Process exited with status ${e}`;t(new Error(n))}}),o.start()});const o=Date.now()-t,s=n-nova.fs.stat(i).size;showSuccessNotification("Lightning CSS: Minified Successfully",`${nova.path.basename(i)} processed in ${o}ms (saved ${formatBytes(s)})`)}catch(e){showErrorNotification("Lightning CSS: Minification Failed",e.message),console.error("CSS Minification failed:",e)}else console.error("Input and output paths are the same. Aborting to prevent overwrite.")}function runMinifier(e,n,i){return new Promise((t,o)=>{const s=new Process("/usr/bin/env",{args:e,stdio:"pipe",shell:!1});let r="",a="";const c=s.stdin.getWriter();c.ready.then(()=>{c.write(n),c.close()}),s.onStdout(e=>{a+=e}),s.onStderr(e=>{r+=e}),s.onDidExit(e=>{if(0===e)a&&0!==a.length?t(a):o(new Error(`${i} produced no output`));else{const n=r.trim()||`Process exited with status ${e}`;o(new Error(n))}}),s.start()})}function showToolNotInstalledError(e,n,i){const t=new NotificationRequest("tool-not-installed");t.title=e,t.body=n,t.actions=["Learn More"],nova.notifications.add(t).then(e=>{0===e.actionIdx&&nova.openURL(i)}),console.error(n)}function showSuccessNotification(e,n){const i=new NotificationRequest("minify-success");i.title=e,i.body=n,nova.notifications.add(i),console.log(n)}function showErrorNotification(e,n){const i=new NotificationRequest("minify-error");i.title=e,i.body=n,nova.notifications.add(i)}exports.activate=async function(){if(console.log("Activating Tinyfier extension (Terser + Lightning CSS)..."),dependencies.npm=await checkCommand("npm",["--version"]),!dependencies.npm)return showDependencyError("NPM Not Found","Node.js and NPM are required. Please install them to use this extension.","https://nodejs.org/"),void console.error("NPM not found. Aborting activation.");(nova.config.get("terser.enabled","boolean")??!0)&&(dependencies.terser=await checkCommand("npx",["terser","--version"]),dependencies.terser?console.log("Terser is installed and enabled."):(showDependencyError("Terser Not Found","Terser could not be found. Install it with: npm install -g terser","https://www.npmjs.com/package/terser"),console.error("Terser not found but is enabled in settings.")));(nova.config.get("lightningcss.enabled","boolean")??!0)&&(dependencies.lightningcss=await checkCommand("npx",["lightningcss","--version"]),dependencies.lightningcss?console.log("Lightning CSS is installed and enabled."):(showDependencyError("Lightning CSS Not Found","Lightning CSS could not be found. Install it with: npm install -g lightningcss-cli","https://www.npmjs.com/package/lightningcss-cli"),console.error("Lightning CSS not found but is enabled in settings."))),console.log("Registering save listeners..."),nova.workspace.onDidAddTextEditor(e=>{e.onDidSave(handleSave)})},exports.deactivate=function(){console.log("Tinyfier extension deactivated.")};
