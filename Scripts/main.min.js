const dependencies={npm:!1,terser:!1,lightningcss:!1};function formatBytes(e){if(0===e)return"0 Bytes";if(e<1024)return`${e} B`;return`${(e/1024).toFixed(1)} KB`}function checkCommand(e,n=[]){return new Promise(i=>{const o=new Process("/usr/bin/env",{args:[e,...n],stdio:"pipe"});let t="";o.onStdout(e=>{t+=e.trim()}),o.onDidExit(e=>{i(0===e?{success:!0,version:t}:{success:!1,version:null})}),o.start()})}function showNotification(e,n,i,o=null){const t=new NotificationRequest(e);t.title=n,t.body=i,o?(t.actions=["Learn More"],nova.notifications.add(t).then(e=>{0===e.actionIdx&&nova.openURL(o)})):nova.notifications.add(t)}function isRemoteFile(e){try{const n=nova.fs.stat(e);return null==n}catch(e){return!0}}function handleSave(e){try{const n=e.document.syntax,i=e.document.path;if(!i)return;if(isRemoteFile(i))return showNotification("remote-file-unsupported","Minification Skipped",`Cannot process remote file: ${nova.path.basename(i)}.\nOnly local files are supported.`),void console.log(`Skipping minification for remote file: ${i}`);if("javascript"===n){if(!(nova.config.get("terser.enabled","boolean")??!0))return void console.log("JS minification is disabled in settings.");if(i.endsWith(".min.js"))return void console.log("Skipping already minified JS file.");minifyJS(e,i)}else if("css"===n){if(!(nova.config.get("lightningcss.enabled","boolean")??!0))return void console.log("CSS minification is disabled in settings.");if(i.endsWith(".min.css"))return void console.log("Skipping already minified CSS file.");minifyCSS(e,i)}}catch(e){console.error("Error in handleSave:",e),showNotification("minify-error","Minification Error",`Unexpected error: ${e.message}`)}}async function minifyJS(e,n){if(!dependencies.terser)return void console.error("Attempted to minify JS but Terser is not installed.");const i=nova.config.get("terser.outputSuffix","string")||".min.js",o=n.replace(/\.js$/,i);if(n!==o)try{const e=nova.fs.open(n,"r"),i=e.read();if(e.close(),!i||0===i.length)throw new Error("Input file is empty");const t=i.length,s=Date.now(),r=await runMinifier(["npx","terser","--compress","--mangle"],i,"Terser"),a=nova.fs.open(o,"w");a.write(r),a.close();const c=Date.now()-s,l=t-r.length,d=nova.path.basename(o);showNotification("minify-success","JS Minified Successfully",`${d} processed in ${c}ms (saved ${formatBytes(l)})`),console.log(`${d} processed in ${c}ms (saved ${formatBytes(l)})`)}catch(n){const i=n.message.match(/Parse error at [^:]+:(\d+),(\d+)/i);if(i){const o=parseInt(i[1],10),t=parseInt(i[2],10);jumpToError(e,o,t),showNotification("minify-error","Error Parsing JavaScript",`Check near line ${o}, column ${t} for the error.`),console.error(`JS Parse Error at line ${o}, column ${t}:`,n.message)}else showNotification("minify-error","JS Minification Failed",n.message),console.error("JS Minification failed:",n)}else console.error("Input and output paths are the same. Aborting to prevent overwrite.")}async function minifyCSS(e,n){if(!dependencies.lightningcss)return void console.error("Attempted to minify CSS but Lightning CSS is not installed.");const i=nova.config.get("lightningcss.outputSuffix","string")||".min.css",o=n.replace(/\.(css|scss|less)$/,i);if(n!==o)try{const e=nova.fs.stat(n).size,i=Date.now();await new Promise((e,i)=>{const t=new Process("/usr/bin/env",{args:["npx","lightningcss","--minify",n,"-o",o],stdio:"pipe",shell:!1});let s="";t.onStderr(e=>{s+=e}),t.onDidExit(n=>{if(0===n)e();else{const e=s.trim()||`Process exited with status ${n}`;i(new Error(e))}}),t.start()});const t=Date.now()-i,s=e-nova.fs.stat(o).size,r=nova.path.basename(o);showNotification("minify-success","CSS Minified Successfully",`${r} processed in ${t}ms (saved ${formatBytes(s)})`),console.log(`${r} processed in ${t}ms (saved ${formatBytes(s)})`)}catch(n){const i=n.message.match(/line:\s*(\d+),\s*column:\s*(\d+)/i);if(i){const o=parseInt(i[1],10),t=parseInt(i[2],10);jumpToError(e,o,t);const s=n.message.match(/kind:\s*(\w+)\(/i);showNotification("minify-error",`Error Parsing CSS: ${s?s[1]:"Parse Error"}`,`Check near line ${o}, column ${t} for the error.`),console.error(`CSS Error at line ${o}, column ${t}:`,n.message)}else showNotification("minify-error","CSS Minification Failed",n.message),console.error("CSS Minification failed:",n)}else console.error("Input and output paths are the same. Aborting to prevent overwrite.")}function runMinifier(e,n,i){return new Promise((o,t)=>{const s=new Process("/usr/bin/env",{args:e,stdio:"pipe",shell:!1});let r="",a="";const c=s.stdin.getWriter();c.ready.then(()=>{c.write(n),c.close()}),s.onStdout(e=>{a+=e}),s.onStderr(e=>{r+=e}),s.onDidExit(e=>{if(0===e)a&&0!==a.length?o(a):t(new Error(`${i} produced no output`));else{const n=r.trim()||`Process exited with status ${e}`;t(new Error(n))}}),s.start()})}function jumpToError(e,n,i){const o=e.document.getTextInRange(new Range(0,e.document.length)).split("\n");let t=0;for(let e=0;e<Math.min(n,o.length);e++)t+=o[e].length+1;t+=i,t=Math.min(t,e.document.length),e.selectedRange=new Range(t,t),e.scrollToPosition(t)}exports.activate=async function(){console.log("Activating Tinyfy extension...");const e=await checkCommand("npm",["-v"]);if(dependencies.npm=e.success,!dependencies.npm)return showNotification("dependency-error","NPM Not Found","Node.js and NPM are required. Please install them to use this extension.","https://nodejs.org/en/download"),void console.error("NPM not found. Aborting activation.");console.log(`NPM version ${e.version} detected.`);if(nova.config.get("terser.enabled","boolean")??!0){const e=await checkCommand("npm",["list","-g","terser","--depth=0"]);if(dependencies.terser=e.success,dependencies.terser){const e=await checkCommand("terser",["--version"]);console.log(`Terser version ${e.version} is installed and enabled.`)}else console.error("Terser not found but is enabled in settings."),showNotification("dependency-error-terser","Terser Not Found","Please install it with:\nnpm install terser -g","https://github.com/terser/terser?tab=readme-ov-file#install")}if(nova.config.get("lightningcss.enabled","boolean")??!0){const e=await checkCommand("npm",["list","-g","lightningcss-cli","--depth=0"]);if(dependencies.lightningcss=e.success,dependencies.lightningcss){const e=await checkCommand("lightningcss",["--version"]);console.log(`Lightning CSS version ${e.version} is installed and enabled.`)}else console.error("Lightning CSS not found but is enabled in settings."),showNotification("dependency-error-lightningcss","Lightning CSS Not Found","Please install it with: \nnpm install lightningcss-cli -g","https://lightningcss.dev/docs.html#from-the-cli")}console.log("Registering save listeners..."),nova.workspace.onDidAddTextEditor(e=>{e.onDidSave(handleSave)})},exports.deactivate=function(){};
